{"ast":null,"code":"import _objectSpread from \"D:/Users/Guilherme/Downloads/c apagar/dias render/base de dados sinapi/sinapi_processor - fase 2/react-sinapi-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"D:/Users/Guilherme/Downloads/c apagar/dias render/base de dados sinapi/sinapi_processor - fase 2/react-sinapi-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n// src/index.ts\nimport { useRef, useCallback } from \"react\";\nimport html2canvas from \"html2canvas\";\n\n// src/converter.ts\nimport jsPDF from \"jspdf\";\n\n// src/constants.ts\nvar MM_TO_PX = 3.77952755906;\nvar Resolution = /* @__PURE__ */(Resolution2 => {\n  Resolution2[Resolution2[\"LOW\"] = 1] = \"LOW\";\n  Resolution2[Resolution2[\"NORMAL\"] = 2] = \"NORMAL\";\n  Resolution2[Resolution2[\"MEDIUM\"] = 3] = \"MEDIUM\";\n  Resolution2[Resolution2[\"HIGH\"] = 7] = \"HIGH\";\n  Resolution2[Resolution2[\"EXTREME\"] = 12] = \"EXTREME\";\n  return Resolution2;\n})(Resolution || {});\nvar Margin = /* @__PURE__ */(Margin2 => {\n  Margin2[Margin2[\"NONE\"] = 0] = \"NONE\";\n  Margin2[Margin2[\"SMALL\"] = 5] = \"SMALL\";\n  Margin2[Margin2[\"MEDIUM\"] = 10] = \"MEDIUM\";\n  Margin2[Margin2[\"LARGE\"] = 25] = \"LARGE\";\n  return Margin2;\n})(Margin || {});\nvar DEFAULT_OPTIONS = {\n  method: \"save\",\n  resolution: 3 /* MEDIUM */,\n  page: {\n    margin: 0 /* NONE */,\n    format: \"A4\",\n    orientation: \"portrait\"\n  },\n  canvas: {\n    mimeType: \"image/jpeg\",\n    qualityRatio: 1,\n    useCORS: true,\n    logging: false\n  },\n  overrides: {}\n};\n\n// src/converter.ts\nvar Converter = class Converter {\n  constructor(canvas, options) {\n    var _this$options$overrid;\n    _defineProperty(this, \"pdf\", void 0);\n    _defineProperty(this, \"canvas\", void 0);\n    _defineProperty(this, \"options\", void 0);\n    this.canvas = canvas;\n    this.options = options;\n    this.pdf = new jsPDF(_objectSpread(_objectSpread({\n      format: this.options.page.format,\n      orientation: this.options.page.orientation\n    }, (_this$options$overrid = this.options.overrides) === null || _this$options$overrid === void 0 ? void 0 : _this$options$overrid.pdf), {}, {\n      unit: \"mm\"\n    }));\n  }\n  getMarginTopMM() {\n    const margin = typeof this.options.page.margin === \"object\" ? this.options.page.margin.top : this.options.page.margin;\n    return Number(margin);\n  }\n  getMarginLeftMM() {\n    const margin = typeof this.options.page.margin === \"object\" ? this.options.page.margin.left : this.options.page.margin;\n    return Number(margin);\n  }\n  getMarginRightMM() {\n    const margin = typeof this.options.page.margin === \"object\" ? this.options.page.margin.right : this.options.page.margin;\n    return Number(margin);\n  }\n  getMarginBottomMM() {\n    const margin = typeof this.options.page.margin === \"object\" ? this.options.page.margin.bottom : this.options.page.margin;\n    return Number(margin);\n  }\n  getMarginTop() {\n    return this.getMarginTopMM() * MM_TO_PX;\n  }\n  getMarginBottom() {\n    return this.getMarginBottomMM() * MM_TO_PX;\n  }\n  getMarginLeft() {\n    return this.getMarginLeftMM() * MM_TO_PX;\n  }\n  getMarginRight() {\n    return this.getMarginRightMM() * MM_TO_PX;\n  }\n  getScale() {\n    return this.options.resolution;\n  }\n  getPageHeight() {\n    return this.getPageHeightMM() * MM_TO_PX;\n  }\n  getPageHeightMM() {\n    return this.pdf.internal.pageSize.height;\n  }\n  getPageWidthMM() {\n    return this.pdf.internal.pageSize.width;\n  }\n  getPageWidth() {\n    return this.getPageWidthMM() * MM_TO_PX;\n  }\n  getOriginalCanvasWidth() {\n    return this.canvas.width / this.getScale();\n  }\n  getOriginalCanvasHeight() {\n    return this.canvas.height / this.getScale();\n  }\n  getCanvasPageAvailableHeight() {\n    return this.getPageAvailableHeight() * this.getScale() * this.getHorizontalFitFactor();\n  }\n  getPageAvailableWidth() {\n    return this.getPageWidth() - (this.getMarginLeft() + this.getMarginRight());\n  }\n  getPageAvailableHeight() {\n    return this.getPageHeight() - (this.getMarginTop() + this.getMarginBottom());\n  }\n  getPageAvailableWidthMM() {\n    return this.getPageAvailableWidth() / MM_TO_PX;\n  }\n  getPageAvailableHeightMM() {\n    return this.getPageAvailableHeight() / MM_TO_PX;\n  }\n  getNumberPages() {\n    return Math.ceil(this.canvas.height / this.getCanvasPageAvailableHeight());\n  }\n  getHorizontalFitFactor() {\n    if (this.getPageAvailableWidth() < this.getOriginalCanvasWidth()) {\n      return this.getOriginalCanvasWidth() / this.getPageAvailableWidth();\n    }\n    return 1;\n  }\n  getCanvasOffsetY(pageNumber) {\n    return this.getCanvasPageAvailableHeight() * (pageNumber - 1);\n  }\n  getCanvasHeightLeft(pageNumber) {\n    return this.canvas.height - this.getCanvasOffsetY(pageNumber);\n  }\n  getCanvasPageHeight(pageNumber) {\n    if (this.canvas.height < this.getCanvasPageAvailableHeight()) {\n      return this.canvas.height;\n    }\n    const canvasHeightPending = this.getCanvasHeightLeft(pageNumber);\n    return canvasHeightPending < this.getCanvasPageAvailableHeight() ? canvasHeightPending : this.getCanvasPageAvailableHeight();\n  }\n  getCanvasPageWidth() {\n    return this.canvas.width;\n  }\n  createCanvasPage(pageNumber) {\n    const canvasPageWidth = this.getCanvasPageWidth();\n    const canvasPageHeight = this.getCanvasPageHeight(pageNumber);\n    const canvasPage = document.createElement(\"canvas\");\n    canvasPage.setAttribute(\"width\", String(canvasPageWidth));\n    canvasPage.setAttribute(\"height\", String(canvasPageHeight));\n    const ctx = canvasPage.getContext(\"2d\");\n    ctx.drawImage(this.canvas, 0, this.getCanvasOffsetY(pageNumber), this.canvas.width, canvasPageHeight, 0, 0, this.canvas.width, canvasPageHeight);\n    return canvasPage;\n  }\n  convert() {\n    let pageNumber = 1;\n    const numberPages = this.getNumberPages();\n    while (pageNumber <= numberPages) {\n      if (pageNumber > 1) {\n        this.pdf.addPage(this.options.page.format, this.options.page.orientation);\n      }\n      const canvasPage = this.createCanvasPage(pageNumber);\n      const pageImageDataURL = canvasPage.toDataURL(this.options.canvas.mimeType, this.options.canvas.qualityRatio);\n      this.pdf.setPage(pageNumber);\n      this.pdf.addImage({\n        imageData: pageImageDataURL,\n        width: canvasPage.width / (this.getScale() * MM_TO_PX * this.getHorizontalFitFactor()),\n        height: canvasPage.height / (this.getScale() * MM_TO_PX * this.getHorizontalFitFactor()),\n        x: this.getMarginLeftMM(),\n        y: this.getMarginTopMM()\n      });\n      pageNumber += 1;\n    }\n    return this.pdf;\n  }\n};\n\n// src/utils.ts\nvar buildConvertOptions = options => {\n  if (!options) {\n    return DEFAULT_OPTIONS;\n  }\n  return _objectSpread(_objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options), {}, {\n    canvas: _objectSpread(_objectSpread({}, DEFAULT_OPTIONS.canvas), options.canvas),\n    page: _objectSpread(_objectSpread({}, DEFAULT_OPTIONS.page), options.page)\n  });\n};\n\n// src/index.ts\nvar getTargetElement = targetRefOrFunction => {\n  if (typeof targetRefOrFunction === \"function\") {\n    return targetRefOrFunction();\n  }\n  return targetRefOrFunction === null || targetRefOrFunction === void 0 ? void 0 : targetRefOrFunction.current;\n};\nvar usePDF = usePDFoptions => {\n  const targetRef = useRef();\n  const toPDF = useCallback(toPDFoptions => {\n    return generatePDF(targetRef, usePDFoptions !== null && usePDFoptions !== void 0 ? usePDFoptions : toPDFoptions);\n  }, [targetRef, usePDFoptions]);\n  return {\n    targetRef,\n    toPDF\n  };\n};\nvar generatePDF = async (targetRefOrFunction, customOptions) => {\n  var _options$overrides;\n  const options = buildConvertOptions(customOptions);\n  const targetElement = getTargetElement(targetRefOrFunction);\n  if (!targetElement) {\n    console.error(\"Unable to get the target element.\");\n    return;\n  }\n  const canvas = await html2canvas(targetElement, _objectSpread({\n    useCORS: options.canvas.useCORS,\n    logging: options.canvas.logging,\n    scale: options.resolution\n  }, (_options$overrides = options.overrides) === null || _options$overrides === void 0 ? void 0 : _options$overrides.canvas));\n  const converter = new Converter(canvas, options);\n  const pdf = converter.convert();\n  switch (options.method) {\n    case \"build\":\n      return pdf;\n    case \"open\":\n      {\n        window.open(pdf.output(\"bloburl\"), \"_blank\");\n        return pdf;\n      }\n    case \"save\":\n    default:\n      {\n        var _options$filename;\n        const pdfFilename = (_options$filename = options.filename) !== null && _options$filename !== void 0 ? _options$filename : \"\".concat((/* @__PURE__ */new Date()).getTime(), \".pdf\");\n        await pdf.save(pdfFilename, {\n          returnPromise: true\n        });\n        return pdf;\n      }\n  }\n};\nvar index_default = generatePDF;\nexport { Margin, Resolution, index_default as default, usePDF };","map":{"version":3,"names":["useRef","useCallback","html2canvas","jsPDF","MM_TO_PX","Resolution","Resolution2","Margin","Margin2","DEFAULT_OPTIONS","method","resolution","page","margin","format","orientation","canvas","mimeType","qualityRatio","useCORS","logging","overrides","Converter","constructor","options","_this$options$overrid","_defineProperty","pdf","_objectSpread","unit","getMarginTopMM","top","Number","getMarginLeftMM","left","getMarginRightMM","right","getMarginBottomMM","bottom","getMarginTop","getMarginBottom","getMarginLeft","getMarginRight","getScale","getPageHeight","getPageHeightMM","internal","pageSize","height","getPageWidthMM","width","getPageWidth","getOriginalCanvasWidth","getOriginalCanvasHeight","getCanvasPageAvailableHeight","getPageAvailableHeight","getHorizontalFitFactor","getPageAvailableWidth","getPageAvailableWidthMM","getPageAvailableHeightMM","getNumberPages","Math","ceil","getCanvasOffsetY","pageNumber","getCanvasHeightLeft","getCanvasPageHeight","canvasHeightPending","getCanvasPageWidth","createCanvasPage","canvasPageWidth","canvasPageHeight","canvasPage","document","createElement","setAttribute","String","ctx","getContext","drawImage","convert","numberPages","addPage","pageImageDataURL","toDataURL","setPage","addImage","imageData","x","y","buildConvertOptions","getTargetElement","targetRefOrFunction","current","usePDF","usePDFoptions","targetRef","toPDF","toPDFoptions","generatePDF","customOptions","_options$overrides","targetElement","console","error","scale","converter","window","open","output","_options$filename","pdfFilename","filename","concat","Date","getTime","save","returnPromise","index_default"],"sources":["D:\\Users\\Guilherme\\Downloads\\c apagar\\dias render\\base de dados sinapi\\sinapi_processor - fase 2\\react-sinapi-app\\node_modules\\react-to-pdf\\src\\index.ts","D:\\Users\\Guilherme\\Downloads\\c apagar\\dias render\\base de dados sinapi\\sinapi_processor - fase 2\\react-sinapi-app\\node_modules\\react-to-pdf\\src\\converter.ts","D:\\Users\\Guilherme\\Downloads\\c apagar\\dias render\\base de dados sinapi\\sinapi_processor - fase 2\\react-sinapi-app\\node_modules\\react-to-pdf\\src\\constants.ts","D:\\Users\\Guilherme\\Downloads\\c apagar\\dias render\\base de dados sinapi\\sinapi_processor - fase 2\\react-sinapi-app\\node_modules\\react-to-pdf\\src\\utils.ts"],"sourcesContent":["import { useRef, useCallback } from \"react\";\nimport html2canvas from \"html2canvas\";\n\nimport Converter from \"./converter\";\nimport { Options, TargetElementFinder, UsePDFResult } from \"./types\";\nimport { buildConvertOptions } from \"./utils\";\nimport jsPDF from \"jspdf\";\nexport { Resolution, Margin } from \"./constants\";\nexport type { Options };\n\nconst getTargetElement = (\n  targetRefOrFunction: TargetElementFinder\n): HTMLElement | null | undefined => {\n  if (typeof targetRefOrFunction === \"function\") {\n    return targetRefOrFunction();\n  }\n  return targetRefOrFunction?.current;\n};\n\nexport const usePDF = (usePDFoptions?: Options): UsePDFResult => {\n  const targetRef = useRef();\n  const toPDF = useCallback(\n    (toPDFoptions?: Options): Promise<InstanceType<typeof jsPDF>> => {\n      return generatePDF(targetRef, usePDFoptions ?? toPDFoptions);\n    },\n    [targetRef, usePDFoptions]\n  );\n  return { targetRef, toPDF };\n};\n\nconst generatePDF = async (\n  targetRefOrFunction: TargetElementFinder,\n  customOptions?: Options\n): Promise<InstanceType<typeof jsPDF>> => {\n  const options = buildConvertOptions(customOptions);\n  const targetElement = getTargetElement(targetRefOrFunction);\n  if (!targetElement) {\n    console.error(\"Unable to get the target element.\");\n    return;\n  }\n  const canvas = await html2canvas(targetElement, {\n    useCORS: options.canvas.useCORS,\n    logging: options.canvas.logging,\n    scale: options.resolution,\n    ...options.overrides?.canvas,\n  });\n  const converter = new Converter(canvas, options);\n  const pdf = converter.convert();\n  switch (options.method) {\n    case \"build\":\n      return pdf;\n    case \"open\": {\n      window.open(pdf.output(\"bloburl\"), \"_blank\");\n      return pdf;\n    }\n    case \"save\":\n    default: {\n      const pdfFilename = options.filename ?? `${new Date().getTime()}.pdf`;\n      await pdf.save(pdfFilename, { returnPromise: true });\n      return pdf;\n    }\n  }\n};\n\nexport default generatePDF;\n","import jsPDF from \"jspdf\";\nimport { MM_TO_PX } from \"./constants\";\nimport { ConversionOptions, Options } from \"./types\";\n\nexport default class Converter {\n  pdf: InstanceType<typeof jsPDF>;\n  canvas: HTMLCanvasElement;\n  options: Options;\n  constructor(canvas: HTMLCanvasElement, options: ConversionOptions) {\n    this.canvas = canvas;\n    this.options = options;\n    this.pdf = new jsPDF({\n      format: this.options.page.format,\n      orientation: this.options.page.orientation,\n      ...this.options.overrides?.pdf,\n      unit: \"mm\",\n    });\n  }\n  getMarginTopMM() {\n    const margin =\n      typeof this.options.page.margin === \"object\"\n        ? this.options.page.margin.top\n        : this.options.page.margin;\n    return Number(margin);\n  }\n  getMarginLeftMM() {\n    const margin =\n      typeof this.options.page.margin === \"object\"\n        ? this.options.page.margin.left\n        : this.options.page.margin;\n    return Number(margin);\n  }\n  getMarginRightMM() {\n    const margin =\n      typeof this.options.page.margin === \"object\"\n        ? this.options.page.margin.right\n        : this.options.page.margin;\n    return Number(margin);\n  }\n  getMarginBottomMM() {\n    const margin =\n      typeof this.options.page.margin === \"object\"\n        ? this.options.page.margin.bottom\n        : this.options.page.margin;\n    return Number(margin);\n  }\n  getMarginTop() {\n    return this.getMarginTopMM() * MM_TO_PX;\n  }\n  getMarginBottom() {\n    return this.getMarginBottomMM() * MM_TO_PX;\n  }\n  getMarginLeft() {\n    return this.getMarginLeftMM() * MM_TO_PX;\n  }\n  getMarginRight() {\n    return this.getMarginRightMM() * MM_TO_PX;\n  }\n  getScale() {\n    return this.options.resolution;\n  }\n  getPageHeight() {\n    return this.getPageHeightMM() * MM_TO_PX;\n  }\n  getPageHeightMM() {\n    return this.pdf.internal.pageSize.height;\n  }\n  getPageWidthMM() {\n    return this.pdf.internal.pageSize.width;\n  }\n  getPageWidth() {\n    return this.getPageWidthMM() * MM_TO_PX;\n  }\n  getOriginalCanvasWidth() {\n    return this.canvas.width / this.getScale();\n  }\n  getOriginalCanvasHeight() {\n    return this.canvas.height / this.getScale();\n  }\n  getCanvasPageAvailableHeight() {\n    return (\n      this.getPageAvailableHeight() *\n      this.getScale() *\n      this.getHorizontalFitFactor()\n    );\n  }\n  getPageAvailableWidth() {\n    return this.getPageWidth() - (this.getMarginLeft() + this.getMarginRight());\n  }\n  getPageAvailableHeight() {\n    return (\n      this.getPageHeight() - (this.getMarginTop() + this.getMarginBottom())\n    );\n  }\n  getPageAvailableWidthMM() {\n    return this.getPageAvailableWidth() / MM_TO_PX;\n  }\n  getPageAvailableHeightMM() {\n    return this.getPageAvailableHeight() / MM_TO_PX;\n  }\n  getNumberPages() {\n    return Math.ceil(this.canvas.height / this.getCanvasPageAvailableHeight());\n  }\n  getHorizontalFitFactor() {\n    if (this.getPageAvailableWidth() < this.getOriginalCanvasWidth()) {\n      return this.getOriginalCanvasWidth() / this.getPageAvailableWidth();\n    }\n    return 1;\n  }\n  getCanvasOffsetY(pageNumber: number) {\n    return this.getCanvasPageAvailableHeight() * (pageNumber - 1);\n  }\n  getCanvasHeightLeft(pageNumber: number) {\n    return this.canvas.height - this.getCanvasOffsetY(pageNumber);\n  }\n  getCanvasPageHeight(pageNumber: number) {\n    if (this.canvas.height < this.getCanvasPageAvailableHeight()) {\n      return this.canvas.height;\n    }\n    const canvasHeightPending = this.getCanvasHeightLeft(pageNumber);\n    return canvasHeightPending < this.getCanvasPageAvailableHeight()\n      ? canvasHeightPending\n      : this.getCanvasPageAvailableHeight();\n  }\n  getCanvasPageWidth() {\n    return this.canvas.width;\n  }\n  createCanvasPage(pageNumber: number): HTMLCanvasElement {\n    const canvasPageWidth = this.getCanvasPageWidth();\n    const canvasPageHeight = this.getCanvasPageHeight(pageNumber);\n    const canvasPage = document.createElement(\"canvas\");\n    canvasPage.setAttribute(\"width\", String(canvasPageWidth));\n    canvasPage.setAttribute(\"height\", String(canvasPageHeight));\n    const ctx = canvasPage.getContext(\"2d\");\n    ctx.drawImage(\n      this.canvas,\n      0,\n      this.getCanvasOffsetY(pageNumber),\n      this.canvas.width,\n      canvasPageHeight,\n      0,\n      0,\n      this.canvas.width,\n      canvasPageHeight\n    );\n    return canvasPage;\n  }\n  convert(): InstanceType<typeof jsPDF> {\n    let pageNumber = 1;\n    const numberPages = this.getNumberPages();\n    while (pageNumber <= numberPages) {\n      if (pageNumber > 1) {\n        this.pdf.addPage(\n          this.options.page.format,\n          this.options.page.orientation\n        );\n      }\n      const canvasPage = this.createCanvasPage(pageNumber);\n      const pageImageDataURL = canvasPage.toDataURL(\n        this.options.canvas.mimeType,\n        this.options.canvas.qualityRatio\n      );\n      this.pdf.setPage(pageNumber);\n      this.pdf.addImage({\n        imageData: pageImageDataURL,\n        width:\n          canvasPage.width /\n          (this.getScale() * MM_TO_PX * this.getHorizontalFitFactor()),\n        height:\n          canvasPage.height /\n          (this.getScale() * MM_TO_PX * this.getHorizontalFitFactor()),\n        x: this.getMarginLeftMM(),\n        y: this.getMarginTopMM(),\n      });\n      pageNumber += 1;\n    }\n    return this.pdf;\n  }\n}\n","import { ConversionOptions } from \"./types\";\n\nexport const MM_TO_PX = 3.77952755906;\n\nexport enum Resolution {\n  LOW = 1,\n  NORMAL = 2,\n  MEDIUM = 3,\n  HIGH = 7,\n  EXTREME = 12,\n}\n\nexport enum Margin {\n  NONE = 0,\n  SMALL = 5,\n  MEDIUM = 10,\n  LARGE = 25,\n}\n\nexport const DEFAULT_OPTIONS: Readonly<ConversionOptions> = {\n  method: \"save\",\n  resolution: Resolution.MEDIUM,\n  page: {\n    margin: Margin.NONE,\n    format: \"A4\",\n    orientation: \"portrait\",\n  },\n  canvas: {\n    mimeType: \"image/jpeg\",\n    qualityRatio: 1,\n    useCORS: true,\n    logging: false,\n  },\n  overrides: {},\n};\n","import { DEFAULT_OPTIONS } from \"./constants\";\nimport { ConversionOptions, Options } from \"./types\";\n\nexport const buildConvertOptions = (options?: Options): ConversionOptions => {\n  if (!options) {\n    return DEFAULT_OPTIONS;\n  }\n  return {\n    ...DEFAULT_OPTIONS,\n    ...options,\n    canvas: { ...DEFAULT_OPTIONS.canvas, ...options.canvas },\n    page: { ...DEFAULT_OPTIONS.page, ...options.page },\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}